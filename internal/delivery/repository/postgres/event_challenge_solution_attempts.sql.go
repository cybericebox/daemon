// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: event_challenge_solution_attempts.sql

package postgres

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
)

const createEventChallengeSolutionAttempt = `-- name: CreateEventChallengeSolutionAttempt :exec
insert into event_challenge_solution_attempts
(id, event_id, challenge_id, team_id, participant_id, answer, flag, is_correct, timestamp)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateEventChallengeSolutionAttemptParams struct {
	ID            uuid.UUID `json:"id"`
	EventID       uuid.UUID `json:"event_id"`
	ChallengeID   uuid.UUID `json:"challenge_id"`
	TeamID        uuid.UUID `json:"team_id"`
	ParticipantID uuid.UUID `json:"participant_id"`
	Answer        string    `json:"answer"`
	Flag          string    `json:"flag"`
	IsCorrect     bool      `json:"is_correct"`
	Timestamp     time.Time `json:"timestamp"`
}

func (q *Queries) CreateEventChallengeSolutionAttempt(ctx context.Context, arg CreateEventChallengeSolutionAttemptParams) error {
	_, err := q.exec(ctx, q.createEventChallengeSolutionAttemptStmt, createEventChallengeSolutionAttempt,
		arg.ID,
		arg.EventID,
		arg.ChallengeID,
		arg.TeamID,
		arg.ParticipantID,
		arg.Answer,
		arg.Flag,
		arg.IsCorrect,
		arg.Timestamp,
	)
	return err
}

const getAllChallengesSolutionsInEvent = `-- name: GetAllChallengesSolutionsInEvent :many

select challenge_id, team_id, participant_id, timestamp
from event_challenge_solution_attempts
where event_id = $1
  and is_correct = true
`

type GetAllChallengesSolutionsInEventRow struct {
	ChallengeID   uuid.UUID `json:"challenge_id"`
	TeamID        uuid.UUID `json:"team_id"`
	ParticipantID uuid.UUID `json:"participant_id"`
	Timestamp     time.Time `json:"timestamp"`
}

// -- name: GetAllSolvedChallengesIDsByTeamInEvent :many
// select challenge_id
// from event_challenge_solution_attempts
// where event_id = $1
//
//	and team_id = $2
//	and is_correct = true;
func (q *Queries) GetAllChallengesSolutionsInEvent(ctx context.Context, eventID uuid.UUID) ([]GetAllChallengesSolutionsInEventRow, error) {
	rows, err := q.query(ctx, q.getAllChallengesSolutionsInEventStmt, getAllChallengesSolutionsInEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllChallengesSolutionsInEventRow{}
	for rows.Next() {
		var i GetAllChallengesSolutionsInEventRow
		if err := rows.Scan(
			&i.ChallengeID,
			&i.TeamID,
			&i.ParticipantID,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamsSolvedChallengeInEvent = `-- name: GetTeamsSolvedChallengeInEvent :many
select t.id, t.name, participant_id, timestamp
from event_challenge_solution_attempts
         inner join event_teams t on t.id = event_challenge_solution_attempts.team_id
where t.event_id = $1
  and challenge_id = $2
  and is_correct = true
`

type GetTeamsSolvedChallengeInEventParams struct {
	EventID     uuid.UUID `json:"event_id"`
	ChallengeID uuid.UUID `json:"challenge_id"`
}

type GetTeamsSolvedChallengeInEventRow struct {
	ID            uuid.UUID `json:"id"`
	Name          string    `json:"name"`
	ParticipantID uuid.UUID `json:"participant_id"`
	Timestamp     time.Time `json:"timestamp"`
}

func (q *Queries) GetTeamsSolvedChallengeInEvent(ctx context.Context, arg GetTeamsSolvedChallengeInEventParams) ([]GetTeamsSolvedChallengeInEventRow, error) {
	rows, err := q.query(ctx, q.getTeamsSolvedChallengeInEventStmt, getTeamsSolvedChallengeInEvent, arg.EventID, arg.ChallengeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTeamsSolvedChallengeInEventRow{}
	for rows.Next() {
		var i GetTeamsSolvedChallengeInEventRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParticipantID,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
