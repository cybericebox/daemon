// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package postgres

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
select count(*) as count
from users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :exec
insert into users (id, google_id, email, name, hashed_password, picture, role)
values ($1, $2, $3, $4, $5, $6, $7)
`

type CreateUserParams struct {
	ID             uuid.UUID   `json:"id"`
	GoogleID       pgtype.Text `json:"google_id"`
	Email          string      `json:"email"`
	Name           string      `json:"name"`
	HashedPassword string      `json:"hashed_password"`
	Picture        string      `json:"picture"`
	Role           string      `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.GoogleID,
		arg.Email,
		arg.Name,
		arg.HashedPassword,
		arg.Picture,
		arg.Role,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :execrows
delete
from users
where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllUsers = `-- name: GetAllUsers :many
select id,
       google_id,
       email,
       name,
       picture,
       role,
       last_seen,
       updated_at,
       updated_by,
       created_at
from users
order by name
`

type GetAllUsersRow struct {
	ID        uuid.UUID          `json:"id"`
	GoogleID  pgtype.Text        `json:"google_id"`
	Email     string             `json:"email"`
	Name      string             `json:"name"`
	Picture   string             `json:"picture"`
	Role      string             `json:"role"`
	LastSeen  time.Time          `json:"last_seen"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	UpdatedBy uuid.NullUUID      `json:"updated_by"`
	CreatedAt time.Time          `json:"created_at"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUsersRow{}
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.GoogleID,
			&i.Email,
			&i.Name,
			&i.Picture,
			&i.Role,
			&i.LastSeen,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, google_id, email, name, hashed_password, picture, role, last_seen, updated_at, updated_by, created_at
from users
where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.Picture,
		&i.Role,
		&i.LastSeen,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, google_id, email, name, hashed_password, picture, role, last_seen, updated_at, updated_by, created_at
from users
where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleID,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.Picture,
		&i.Role,
		&i.LastSeen,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersWithSimilar = `-- name: GetUsersWithSimilar :many
select id,
       google_id,
       email,
       name,
       picture,
       role,
       last_seen,
       updated_at,
       updated_by,
       created_at
from users
where name ilike '%' || $1::text || '%'
   or email ilike '%' || $1::text || '%'
order by name
`

type GetUsersWithSimilarRow struct {
	ID        uuid.UUID          `json:"id"`
	GoogleID  pgtype.Text        `json:"google_id"`
	Email     string             `json:"email"`
	Name      string             `json:"name"`
	Picture   string             `json:"picture"`
	Role      string             `json:"role"`
	LastSeen  time.Time          `json:"last_seen"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	UpdatedBy uuid.NullUUID      `json:"updated_by"`
	CreatedAt time.Time          `json:"created_at"`
}

func (q *Queries) GetUsersWithSimilar(ctx context.Context, search string) ([]GetUsersWithSimilarRow, error) {
	rows, err := q.db.Query(ctx, getUsersWithSimilar, search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersWithSimilarRow{}
	for rows.Next() {
		var i GetUsersWithSimilarRow
		if err := rows.Scan(
			&i.ID,
			&i.GoogleID,
			&i.Email,
			&i.Name,
			&i.Picture,
			&i.Role,
			&i.LastSeen,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setLastSeen = `-- name: SetLastSeen :execrows
update users
set last_seen = now()
where id = $1
`

func (q *Queries) SetLastSeen(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, setLastSeen, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateUserEmail = `-- name: UpdateUserEmail :execrows
update users
set email      = $2,
    updated_at = now(),
    updated_by = $3
where id = $1
`

type UpdateUserEmailParams struct {
	ID        uuid.UUID     `json:"id"`
	Email     string        `json:"email"`
	UpdatedBy uuid.NullUUID `json:"updated_by"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUserEmail, arg.ID, arg.Email, arg.UpdatedBy)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateUserGoogleID = `-- name: UpdateUserGoogleID :execrows
update users
set google_id  = $2,
    updated_at = now(),
    updated_by = $3
where id = $1
`

type UpdateUserGoogleIDParams struct {
	ID        uuid.UUID     `json:"id"`
	GoogleID  pgtype.Text   `json:"google_id"`
	UpdatedBy uuid.NullUUID `json:"updated_by"`
}

func (q *Queries) UpdateUserGoogleID(ctx context.Context, arg UpdateUserGoogleIDParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUserGoogleID, arg.ID, arg.GoogleID, arg.UpdatedBy)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateUserName = `-- name: UpdateUserName :execrows
update users
set name       = $2,
    updated_at = now(),
    updated_by = $3
where id = $1
`

type UpdateUserNameParams struct {
	ID        uuid.UUID     `json:"id"`
	Name      string        `json:"name"`
	UpdatedBy uuid.NullUUID `json:"updated_by"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUserName, arg.ID, arg.Name, arg.UpdatedBy)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateUserPassword = `-- name: UpdateUserPassword :execrows
update users
set hashed_password = $2,
    updated_at      = now(),
    updated_by      = $3
where id = $1
`

type UpdateUserPasswordParams struct {
	ID             uuid.UUID     `json:"id"`
	HashedPassword string        `json:"hashed_password"`
	UpdatedBy      uuid.NullUUID `json:"updated_by"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.HashedPassword, arg.UpdatedBy)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateUserPicture = `-- name: UpdateUserPicture :execrows
update users
set picture    = $2,
    updated_at = now(),
    updated_by = $3
where id = $1
`

type UpdateUserPictureParams struct {
	ID        uuid.UUID     `json:"id"`
	Picture   string        `json:"picture"`
	UpdatedBy uuid.NullUUID `json:"updated_by"`
}

func (q *Queries) UpdateUserPicture(ctx context.Context, arg UpdateUserPictureParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUserPicture, arg.ID, arg.Picture, arg.UpdatedBy)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateUserRole = `-- name: UpdateUserRole :execrows
update users
set role       = $2,
    updated_at = now(),
    updated_by = $3
where id = $1
`

type UpdateUserRoleParams struct {
	ID        uuid.UUID     `json:"id"`
	Role      string        `json:"role"`
	UpdatedBy uuid.NullUUID `json:"updated_by"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateUserRole, arg.ID, arg.Role, arg.UpdatedBy)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
