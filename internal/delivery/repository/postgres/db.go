// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package postgres

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countChallengesInEventsStmt, err = db.PrepareContext(ctx, countChallengesInEvents); err != nil {
		return nil, fmt.Errorf("error preparing query CountChallengesInEvents: %w", err)
	}
	if q.countTeamsInEventsStmt, err = db.PrepareContext(ctx, countTeamsInEvents); err != nil {
		return nil, fmt.Errorf("error preparing query CountTeamsInEvents: %w", err)
	}
	if q.createEventStmt, err = db.PrepareContext(ctx, createEvent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEvent: %w", err)
	}
	if q.createEventChallengeStmt, err = db.PrepareContext(ctx, createEventChallenge); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEventChallenge: %w", err)
	}
	if q.createEventChallengeCategoryStmt, err = db.PrepareContext(ctx, createEventChallengeCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEventChallengeCategory: %w", err)
	}
	if q.createEventChallengeSolutionAttemptStmt, err = db.PrepareContext(ctx, createEventChallengeSolutionAttempt); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEventChallengeSolutionAttempt: %w", err)
	}
	if q.createEventParticipantStmt, err = db.PrepareContext(ctx, createEventParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEventParticipant: %w", err)
	}
	if q.createEventTeamChallengeStmt, err = db.PrepareContext(ctx, createEventTeamChallenge); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEventTeamChallenge: %w", err)
	}
	if q.createExerciseStmt, err = db.PrepareContext(ctx, createExercise); err != nil {
		return nil, fmt.Errorf("error preparing query CreateExercise: %w", err)
	}
	if q.createExerciseCategoryStmt, err = db.PrepareContext(ctx, createExerciseCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateExerciseCategory: %w", err)
	}
	if q.createFileStmt, err = db.PrepareContext(ctx, createFile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFile: %w", err)
	}
	if q.createTeamInEventStmt, err = db.PrepareContext(ctx, createTeamInEvent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTeamInEvent: %w", err)
	}
	if q.createTemporalCodeStmt, err = db.PrepareContext(ctx, createTemporalCode); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTemporalCode: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteEventStmt, err = db.PrepareContext(ctx, deleteEvent); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEvent: %w", err)
	}
	if q.deleteEventChallengeCategoryStmt, err = db.PrepareContext(ctx, deleteEventChallengeCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEventChallengeCategory: %w", err)
	}
	if q.deleteEventChallengesStmt, err = db.PrepareContext(ctx, deleteEventChallenges); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEventChallenges: %w", err)
	}
	if q.deleteExerciseStmt, err = db.PrepareContext(ctx, deleteExercise); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExercise: %w", err)
	}
	if q.deleteExerciseCategoryStmt, err = db.PrepareContext(ctx, deleteExerciseCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExerciseCategory: %w", err)
	}
	if q.deleteFileStmt, err = db.PrepareContext(ctx, deleteFile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFile: %w", err)
	}
	if q.deleteTemporalCodeStmt, err = db.PrepareContext(ctx, deleteTemporalCode); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTemporalCode: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.doesUserExistByIDStmt, err = db.PrepareContext(ctx, doesUserExistByID); err != nil {
		return nil, fmt.Errorf("error preparing query DoesUserExistByID: %w", err)
	}
	if q.getAllChallengesSolutionsInEventStmt, err = db.PrepareContext(ctx, getAllChallengesSolutionsInEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllChallengesSolutionsInEvent: %w", err)
	}
	if q.getAllEventsStmt, err = db.PrepareContext(ctx, getAllEvents); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllEvents: %w", err)
	}
	if q.getAllUsersStmt, err = db.PrepareContext(ctx, getAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllUsers: %w", err)
	}
	if q.getChallengeFlagStmt, err = db.PrepareContext(ctx, getChallengeFlag); err != nil {
		return nil, fmt.Errorf("error preparing query GetChallengeFlag: %w", err)
	}
	if q.getEmailTemplateBodyStmt, err = db.PrepareContext(ctx, getEmailTemplateBody); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmailTemplateBody: %w", err)
	}
	if q.getEmailTemplateSubjectStmt, err = db.PrepareContext(ctx, getEmailTemplateSubject); err != nil {
		return nil, fmt.Errorf("error preparing query GetEmailTemplateSubject: %w", err)
	}
	if q.getEventByIDStmt, err = db.PrepareContext(ctx, getEventByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventByID: %w", err)
	}
	if q.getEventByTagStmt, err = db.PrepareContext(ctx, getEventByTag); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventByTag: %w", err)
	}
	if q.getEventChallengeByIDStmt, err = db.PrepareContext(ctx, getEventChallengeByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventChallengeByID: %w", err)
	}
	if q.getEventChallengeCategoriesStmt, err = db.PrepareContext(ctx, getEventChallengeCategories); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventChallengeCategories: %w", err)
	}
	if q.getEventChallengesStmt, err = db.PrepareContext(ctx, getEventChallenges); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventChallenges: %w", err)
	}
	if q.getEventIDIfNotWithdrawnStmt, err = db.PrepareContext(ctx, getEventIDIfNotWithdrawn); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventIDIfNotWithdrawn: %w", err)
	}
	if q.getEventIDIfRunningStmt, err = db.PrepareContext(ctx, getEventIDIfRunning); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventIDIfRunning: %w", err)
	}
	if q.getEventJoinStatusStmt, err = db.PrepareContext(ctx, getEventJoinStatus); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventJoinStatus: %w", err)
	}
	if q.getEventParticipantTeamStmt, err = db.PrepareContext(ctx, getEventParticipantTeam); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventParticipantTeam: %w", err)
	}
	if q.getEventParticipantTeamIDStmt, err = db.PrepareContext(ctx, getEventParticipantTeamID); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventParticipantTeamID: %w", err)
	}
	if q.getEventTeamByNameStmt, err = db.PrepareContext(ctx, getEventTeamByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventTeamByName: %w", err)
	}
	if q.getEventTeamsStmt, err = db.PrepareContext(ctx, getEventTeams); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventTeams: %w", err)
	}
	if q.getExerciseByIDStmt, err = db.PrepareContext(ctx, getExerciseByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetExerciseByID: %w", err)
	}
	if q.getExerciseCategoriesStmt, err = db.PrepareContext(ctx, getExerciseCategories); err != nil {
		return nil, fmt.Errorf("error preparing query GetExerciseCategories: %w", err)
	}
	if q.getExercisesStmt, err = db.PrepareContext(ctx, getExercises); err != nil {
		return nil, fmt.Errorf("error preparing query GetExercises: %w", err)
	}
	if q.getExercisesByCategoryStmt, err = db.PrepareContext(ctx, getExercisesByCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetExercisesByCategory: %w", err)
	}
	if q.getFileByIDStmt, err = db.PrepareContext(ctx, getFileByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileByID: %w", err)
	}
	if q.getTeamsSolvedChallengeInEventStmt, err = db.PrepareContext(ctx, getTeamsSolvedChallengeInEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetTeamsSolvedChallengeInEvent: %w", err)
	}
	if q.getTemporalCodeStmt, err = db.PrepareContext(ctx, getTemporalCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetTemporalCode: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUsersWithSimilarStmt, err = db.PrepareContext(ctx, getUsersWithSimilar); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersWithSimilar: %w", err)
	}
	if q.setLastSeenStmt, err = db.PrepareContext(ctx, setLastSeen); err != nil {
		return nil, fmt.Errorf("error preparing query SetLastSeen: %w", err)
	}
	if q.teamExistsInEventStmt, err = db.PrepareContext(ctx, teamExistsInEvent); err != nil {
		return nil, fmt.Errorf("error preparing query TeamExistsInEvent: %w", err)
	}
	if q.updateEventStmt, err = db.PrepareContext(ctx, updateEvent); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEvent: %w", err)
	}
	if q.updateEventChallengeCategoryStmt, err = db.PrepareContext(ctx, updateEventChallengeCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEventChallengeCategory: %w", err)
	}
	if q.updateEventChallengeCategoryOrderStmt, err = db.PrepareContext(ctx, updateEventChallengeCategoryOrder); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEventChallengeCategoryOrder: %w", err)
	}
	if q.updateEventChallengeOrderStmt, err = db.PrepareContext(ctx, updateEventChallengeOrder); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEventChallengeOrder: %w", err)
	}
	if q.updateEventParticipantStatusStmt, err = db.PrepareContext(ctx, updateEventParticipantStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEventParticipantStatus: %w", err)
	}
	if q.updateEventParticipantTeamStmt, err = db.PrepareContext(ctx, updateEventParticipantTeam); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEventParticipantTeam: %w", err)
	}
	if q.updateExerciseStmt, err = db.PrepareContext(ctx, updateExercise); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateExercise: %w", err)
	}
	if q.updateExerciseCategoryStmt, err = db.PrepareContext(ctx, updateExerciseCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateExerciseCategory: %w", err)
	}
	if q.updateUserEmailStmt, err = db.PrepareContext(ctx, updateUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmail: %w", err)
	}
	if q.updateUserGoogleIDStmt, err = db.PrepareContext(ctx, updateUserGoogleID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserGoogleID: %w", err)
	}
	if q.updateUserNameStmt, err = db.PrepareContext(ctx, updateUserName); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserName: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserPictureStmt, err = db.PrepareContext(ctx, updateUserPicture); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPicture: %w", err)
	}
	if q.updateUserRoleStmt, err = db.PrepareContext(ctx, updateUserRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserRole: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countChallengesInEventsStmt != nil {
		if cerr := q.countChallengesInEventsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countChallengesInEventsStmt: %w", cerr)
		}
	}
	if q.countTeamsInEventsStmt != nil {
		if cerr := q.countTeamsInEventsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTeamsInEventsStmt: %w", cerr)
		}
	}
	if q.createEventStmt != nil {
		if cerr := q.createEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEventStmt: %w", cerr)
		}
	}
	if q.createEventChallengeStmt != nil {
		if cerr := q.createEventChallengeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEventChallengeStmt: %w", cerr)
		}
	}
	if q.createEventChallengeCategoryStmt != nil {
		if cerr := q.createEventChallengeCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEventChallengeCategoryStmt: %w", cerr)
		}
	}
	if q.createEventChallengeSolutionAttemptStmt != nil {
		if cerr := q.createEventChallengeSolutionAttemptStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEventChallengeSolutionAttemptStmt: %w", cerr)
		}
	}
	if q.createEventParticipantStmt != nil {
		if cerr := q.createEventParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEventParticipantStmt: %w", cerr)
		}
	}
	if q.createEventTeamChallengeStmt != nil {
		if cerr := q.createEventTeamChallengeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEventTeamChallengeStmt: %w", cerr)
		}
	}
	if q.createExerciseStmt != nil {
		if cerr := q.createExerciseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createExerciseStmt: %w", cerr)
		}
	}
	if q.createExerciseCategoryStmt != nil {
		if cerr := q.createExerciseCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createExerciseCategoryStmt: %w", cerr)
		}
	}
	if q.createFileStmt != nil {
		if cerr := q.createFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFileStmt: %w", cerr)
		}
	}
	if q.createTeamInEventStmt != nil {
		if cerr := q.createTeamInEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTeamInEventStmt: %w", cerr)
		}
	}
	if q.createTemporalCodeStmt != nil {
		if cerr := q.createTemporalCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTemporalCodeStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteEventStmt != nil {
		if cerr := q.deleteEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEventStmt: %w", cerr)
		}
	}
	if q.deleteEventChallengeCategoryStmt != nil {
		if cerr := q.deleteEventChallengeCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEventChallengeCategoryStmt: %w", cerr)
		}
	}
	if q.deleteEventChallengesStmt != nil {
		if cerr := q.deleteEventChallengesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEventChallengesStmt: %w", cerr)
		}
	}
	if q.deleteExerciseStmt != nil {
		if cerr := q.deleteExerciseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExerciseStmt: %w", cerr)
		}
	}
	if q.deleteExerciseCategoryStmt != nil {
		if cerr := q.deleteExerciseCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExerciseCategoryStmt: %w", cerr)
		}
	}
	if q.deleteFileStmt != nil {
		if cerr := q.deleteFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFileStmt: %w", cerr)
		}
	}
	if q.deleteTemporalCodeStmt != nil {
		if cerr := q.deleteTemporalCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTemporalCodeStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.doesUserExistByIDStmt != nil {
		if cerr := q.doesUserExistByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing doesUserExistByIDStmt: %w", cerr)
		}
	}
	if q.getAllChallengesSolutionsInEventStmt != nil {
		if cerr := q.getAllChallengesSolutionsInEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllChallengesSolutionsInEventStmt: %w", cerr)
		}
	}
	if q.getAllEventsStmt != nil {
		if cerr := q.getAllEventsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllEventsStmt: %w", cerr)
		}
	}
	if q.getAllUsersStmt != nil {
		if cerr := q.getAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllUsersStmt: %w", cerr)
		}
	}
	if q.getChallengeFlagStmt != nil {
		if cerr := q.getChallengeFlagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChallengeFlagStmt: %w", cerr)
		}
	}
	if q.getEmailTemplateBodyStmt != nil {
		if cerr := q.getEmailTemplateBodyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmailTemplateBodyStmt: %w", cerr)
		}
	}
	if q.getEmailTemplateSubjectStmt != nil {
		if cerr := q.getEmailTemplateSubjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEmailTemplateSubjectStmt: %w", cerr)
		}
	}
	if q.getEventByIDStmt != nil {
		if cerr := q.getEventByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventByIDStmt: %w", cerr)
		}
	}
	if q.getEventByTagStmt != nil {
		if cerr := q.getEventByTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventByTagStmt: %w", cerr)
		}
	}
	if q.getEventChallengeByIDStmt != nil {
		if cerr := q.getEventChallengeByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventChallengeByIDStmt: %w", cerr)
		}
	}
	if q.getEventChallengeCategoriesStmt != nil {
		if cerr := q.getEventChallengeCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventChallengeCategoriesStmt: %w", cerr)
		}
	}
	if q.getEventChallengesStmt != nil {
		if cerr := q.getEventChallengesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventChallengesStmt: %w", cerr)
		}
	}
	if q.getEventIDIfNotWithdrawnStmt != nil {
		if cerr := q.getEventIDIfNotWithdrawnStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventIDIfNotWithdrawnStmt: %w", cerr)
		}
	}
	if q.getEventIDIfRunningStmt != nil {
		if cerr := q.getEventIDIfRunningStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventIDIfRunningStmt: %w", cerr)
		}
	}
	if q.getEventJoinStatusStmt != nil {
		if cerr := q.getEventJoinStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventJoinStatusStmt: %w", cerr)
		}
	}
	if q.getEventParticipantTeamStmt != nil {
		if cerr := q.getEventParticipantTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventParticipantTeamStmt: %w", cerr)
		}
	}
	if q.getEventParticipantTeamIDStmt != nil {
		if cerr := q.getEventParticipantTeamIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventParticipantTeamIDStmt: %w", cerr)
		}
	}
	if q.getEventTeamByNameStmt != nil {
		if cerr := q.getEventTeamByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventTeamByNameStmt: %w", cerr)
		}
	}
	if q.getEventTeamsStmt != nil {
		if cerr := q.getEventTeamsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventTeamsStmt: %w", cerr)
		}
	}
	if q.getExerciseByIDStmt != nil {
		if cerr := q.getExerciseByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExerciseByIDStmt: %w", cerr)
		}
	}
	if q.getExerciseCategoriesStmt != nil {
		if cerr := q.getExerciseCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExerciseCategoriesStmt: %w", cerr)
		}
	}
	if q.getExercisesStmt != nil {
		if cerr := q.getExercisesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExercisesStmt: %w", cerr)
		}
	}
	if q.getExercisesByCategoryStmt != nil {
		if cerr := q.getExercisesByCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExercisesByCategoryStmt: %w", cerr)
		}
	}
	if q.getFileByIDStmt != nil {
		if cerr := q.getFileByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileByIDStmt: %w", cerr)
		}
	}
	if q.getTeamsSolvedChallengeInEventStmt != nil {
		if cerr := q.getTeamsSolvedChallengeInEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTeamsSolvedChallengeInEventStmt: %w", cerr)
		}
	}
	if q.getTemporalCodeStmt != nil {
		if cerr := q.getTemporalCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTemporalCodeStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUsersWithSimilarStmt != nil {
		if cerr := q.getUsersWithSimilarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersWithSimilarStmt: %w", cerr)
		}
	}
	if q.setLastSeenStmt != nil {
		if cerr := q.setLastSeenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setLastSeenStmt: %w", cerr)
		}
	}
	if q.teamExistsInEventStmt != nil {
		if cerr := q.teamExistsInEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing teamExistsInEventStmt: %w", cerr)
		}
	}
	if q.updateEventStmt != nil {
		if cerr := q.updateEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEventStmt: %w", cerr)
		}
	}
	if q.updateEventChallengeCategoryStmt != nil {
		if cerr := q.updateEventChallengeCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEventChallengeCategoryStmt: %w", cerr)
		}
	}
	if q.updateEventChallengeCategoryOrderStmt != nil {
		if cerr := q.updateEventChallengeCategoryOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEventChallengeCategoryOrderStmt: %w", cerr)
		}
	}
	if q.updateEventChallengeOrderStmt != nil {
		if cerr := q.updateEventChallengeOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEventChallengeOrderStmt: %w", cerr)
		}
	}
	if q.updateEventParticipantStatusStmt != nil {
		if cerr := q.updateEventParticipantStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEventParticipantStatusStmt: %w", cerr)
		}
	}
	if q.updateEventParticipantTeamStmt != nil {
		if cerr := q.updateEventParticipantTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEventParticipantTeamStmt: %w", cerr)
		}
	}
	if q.updateExerciseStmt != nil {
		if cerr := q.updateExerciseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateExerciseStmt: %w", cerr)
		}
	}
	if q.updateExerciseCategoryStmt != nil {
		if cerr := q.updateExerciseCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateExerciseCategoryStmt: %w", cerr)
		}
	}
	if q.updateUserEmailStmt != nil {
		if cerr := q.updateUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailStmt: %w", cerr)
		}
	}
	if q.updateUserGoogleIDStmt != nil {
		if cerr := q.updateUserGoogleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserGoogleIDStmt: %w", cerr)
		}
	}
	if q.updateUserNameStmt != nil {
		if cerr := q.updateUserNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserNameStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserPictureStmt != nil {
		if cerr := q.updateUserPictureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPictureStmt: %w", cerr)
		}
	}
	if q.updateUserRoleStmt != nil {
		if cerr := q.updateUserRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserRoleStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                      DBTX
	tx                                      *sql.Tx
	countChallengesInEventsStmt             *sql.Stmt
	countTeamsInEventsStmt                  *sql.Stmt
	createEventStmt                         *sql.Stmt
	createEventChallengeStmt                *sql.Stmt
	createEventChallengeCategoryStmt        *sql.Stmt
	createEventChallengeSolutionAttemptStmt *sql.Stmt
	createEventParticipantStmt              *sql.Stmt
	createEventTeamChallengeStmt            *sql.Stmt
	createExerciseStmt                      *sql.Stmt
	createExerciseCategoryStmt              *sql.Stmt
	createFileStmt                          *sql.Stmt
	createTeamInEventStmt                   *sql.Stmt
	createTemporalCodeStmt                  *sql.Stmt
	createUserStmt                          *sql.Stmt
	deleteEventStmt                         *sql.Stmt
	deleteEventChallengeCategoryStmt        *sql.Stmt
	deleteEventChallengesStmt               *sql.Stmt
	deleteExerciseStmt                      *sql.Stmt
	deleteExerciseCategoryStmt              *sql.Stmt
	deleteFileStmt                          *sql.Stmt
	deleteTemporalCodeStmt                  *sql.Stmt
	deleteUserStmt                          *sql.Stmt
	doesUserExistByIDStmt                   *sql.Stmt
	getAllChallengesSolutionsInEventStmt    *sql.Stmt
	getAllEventsStmt                        *sql.Stmt
	getAllUsersStmt                         *sql.Stmt
	getChallengeFlagStmt                    *sql.Stmt
	getEmailTemplateBodyStmt                *sql.Stmt
	getEmailTemplateSubjectStmt             *sql.Stmt
	getEventByIDStmt                        *sql.Stmt
	getEventByTagStmt                       *sql.Stmt
	getEventChallengeByIDStmt               *sql.Stmt
	getEventChallengeCategoriesStmt         *sql.Stmt
	getEventChallengesStmt                  *sql.Stmt
	getEventIDIfNotWithdrawnStmt            *sql.Stmt
	getEventIDIfRunningStmt                 *sql.Stmt
	getEventJoinStatusStmt                  *sql.Stmt
	getEventParticipantTeamStmt             *sql.Stmt
	getEventParticipantTeamIDStmt           *sql.Stmt
	getEventTeamByNameStmt                  *sql.Stmt
	getEventTeamsStmt                       *sql.Stmt
	getExerciseByIDStmt                     *sql.Stmt
	getExerciseCategoriesStmt               *sql.Stmt
	getExercisesStmt                        *sql.Stmt
	getExercisesByCategoryStmt              *sql.Stmt
	getFileByIDStmt                         *sql.Stmt
	getTeamsSolvedChallengeInEventStmt      *sql.Stmt
	getTemporalCodeStmt                     *sql.Stmt
	getUserByEmailStmt                      *sql.Stmt
	getUserByIDStmt                         *sql.Stmt
	getUsersWithSimilarStmt                 *sql.Stmt
	setLastSeenStmt                         *sql.Stmt
	teamExistsInEventStmt                   *sql.Stmt
	updateEventStmt                         *sql.Stmt
	updateEventChallengeCategoryStmt        *sql.Stmt
	updateEventChallengeCategoryOrderStmt   *sql.Stmt
	updateEventChallengeOrderStmt           *sql.Stmt
	updateEventParticipantStatusStmt        *sql.Stmt
	updateEventParticipantTeamStmt          *sql.Stmt
	updateExerciseStmt                      *sql.Stmt
	updateExerciseCategoryStmt              *sql.Stmt
	updateUserEmailStmt                     *sql.Stmt
	updateUserGoogleIDStmt                  *sql.Stmt
	updateUserNameStmt                      *sql.Stmt
	updateUserPasswordStmt                  *sql.Stmt
	updateUserPictureStmt                   *sql.Stmt
	updateUserRoleStmt                      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                      tx,
		tx:                                      tx,
		countChallengesInEventsStmt:             q.countChallengesInEventsStmt,
		countTeamsInEventsStmt:                  q.countTeamsInEventsStmt,
		createEventStmt:                         q.createEventStmt,
		createEventChallengeStmt:                q.createEventChallengeStmt,
		createEventChallengeCategoryStmt:        q.createEventChallengeCategoryStmt,
		createEventChallengeSolutionAttemptStmt: q.createEventChallengeSolutionAttemptStmt,
		createEventParticipantStmt:              q.createEventParticipantStmt,
		createEventTeamChallengeStmt:            q.createEventTeamChallengeStmt,
		createExerciseStmt:                      q.createExerciseStmt,
		createExerciseCategoryStmt:              q.createExerciseCategoryStmt,
		createFileStmt:                          q.createFileStmt,
		createTeamInEventStmt:                   q.createTeamInEventStmt,
		createTemporalCodeStmt:                  q.createTemporalCodeStmt,
		createUserStmt:                          q.createUserStmt,
		deleteEventStmt:                         q.deleteEventStmt,
		deleteEventChallengeCategoryStmt:        q.deleteEventChallengeCategoryStmt,
		deleteEventChallengesStmt:               q.deleteEventChallengesStmt,
		deleteExerciseStmt:                      q.deleteExerciseStmt,
		deleteExerciseCategoryStmt:              q.deleteExerciseCategoryStmt,
		deleteFileStmt:                          q.deleteFileStmt,
		deleteTemporalCodeStmt:                  q.deleteTemporalCodeStmt,
		deleteUserStmt:                          q.deleteUserStmt,
		doesUserExistByIDStmt:                   q.doesUserExistByIDStmt,
		getAllChallengesSolutionsInEventStmt:    q.getAllChallengesSolutionsInEventStmt,
		getAllEventsStmt:                        q.getAllEventsStmt,
		getAllUsersStmt:                         q.getAllUsersStmt,
		getChallengeFlagStmt:                    q.getChallengeFlagStmt,
		getEmailTemplateBodyStmt:                q.getEmailTemplateBodyStmt,
		getEmailTemplateSubjectStmt:             q.getEmailTemplateSubjectStmt,
		getEventByIDStmt:                        q.getEventByIDStmt,
		getEventByTagStmt:                       q.getEventByTagStmt,
		getEventChallengeByIDStmt:               q.getEventChallengeByIDStmt,
		getEventChallengeCategoriesStmt:         q.getEventChallengeCategoriesStmt,
		getEventChallengesStmt:                  q.getEventChallengesStmt,
		getEventIDIfNotWithdrawnStmt:            q.getEventIDIfNotWithdrawnStmt,
		getEventIDIfRunningStmt:                 q.getEventIDIfRunningStmt,
		getEventJoinStatusStmt:                  q.getEventJoinStatusStmt,
		getEventParticipantTeamStmt:             q.getEventParticipantTeamStmt,
		getEventParticipantTeamIDStmt:           q.getEventParticipantTeamIDStmt,
		getEventTeamByNameStmt:                  q.getEventTeamByNameStmt,
		getEventTeamsStmt:                       q.getEventTeamsStmt,
		getExerciseByIDStmt:                     q.getExerciseByIDStmt,
		getExerciseCategoriesStmt:               q.getExerciseCategoriesStmt,
		getExercisesStmt:                        q.getExercisesStmt,
		getExercisesByCategoryStmt:              q.getExercisesByCategoryStmt,
		getFileByIDStmt:                         q.getFileByIDStmt,
		getTeamsSolvedChallengeInEventStmt:      q.getTeamsSolvedChallengeInEventStmt,
		getTemporalCodeStmt:                     q.getTemporalCodeStmt,
		getUserByEmailStmt:                      q.getUserByEmailStmt,
		getUserByIDStmt:                         q.getUserByIDStmt,
		getUsersWithSimilarStmt:                 q.getUsersWithSimilarStmt,
		setLastSeenStmt:                         q.setLastSeenStmt,
		teamExistsInEventStmt:                   q.teamExistsInEventStmt,
		updateEventStmt:                         q.updateEventStmt,
		updateEventChallengeCategoryStmt:        q.updateEventChallengeCategoryStmt,
		updateEventChallengeCategoryOrderStmt:   q.updateEventChallengeCategoryOrderStmt,
		updateEventChallengeOrderStmt:           q.updateEventChallengeOrderStmt,
		updateEventParticipantStatusStmt:        q.updateEventParticipantStatusStmt,
		updateEventParticipantTeamStmt:          q.updateEventParticipantTeamStmt,
		updateExerciseStmt:                      q.updateExerciseStmt,
		updateExerciseCategoryStmt:              q.updateExerciseCategoryStmt,
		updateUserEmailStmt:                     q.updateUserEmailStmt,
		updateUserGoogleIDStmt:                  q.updateUserGoogleIDStmt,
		updateUserNameStmt:                      q.updateUserNameStmt,
		updateUserPasswordStmt:                  q.updateUserPasswordStmt,
		updateUserPictureStmt:                   q.updateUserPictureStmt,
		updateUserRoleStmt:                      q.updateUserRoleStmt,
	}
}
