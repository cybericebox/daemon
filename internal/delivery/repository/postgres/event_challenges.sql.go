// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: event_challenges.sql

package postgres

import (
	"context"

	"github.com/gofrs/uuid"
)

const countChallengesInEvents = `-- name: CountChallengesInEvents :many
select count(*), event_id
from event_challenges
group by event_id
`

type CountChallengesInEventsRow struct {
	Count   int64     `json:"count"`
	EventID uuid.UUID `json:"event_id"`
}

func (q *Queries) CountChallengesInEvents(ctx context.Context) ([]CountChallengesInEventsRow, error) {
	rows, err := q.query(ctx, q.countChallengesInEventsStmt, countChallengesInEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CountChallengesInEventsRow{}
	for rows.Next() {
		var i CountChallengesInEventsRow
		if err := rows.Scan(&i.Count, &i.EventID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createEventChallenge = `-- name: CreateEventChallenge :exec
insert into event_challenges
(id, event_id, category_id, name, description, points, order_index, exercise_id, exercise_task_id)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateEventChallengeParams struct {
	ID             uuid.UUID `json:"id"`
	EventID        uuid.UUID `json:"event_id"`
	CategoryID     uuid.UUID `json:"category_id"`
	Name           string    `json:"name"`
	Description    string    `json:"description"`
	Points         int32     `json:"points"`
	OrderIndex     int32     `json:"order_index"`
	ExerciseID     uuid.UUID `json:"exercise_id"`
	ExerciseTaskID uuid.UUID `json:"exercise_task_id"`
}

func (q *Queries) CreateEventChallenge(ctx context.Context, arg CreateEventChallengeParams) error {
	_, err := q.exec(ctx, q.createEventChallengeStmt, createEventChallenge,
		arg.ID,
		arg.EventID,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.Points,
		arg.OrderIndex,
		arg.ExerciseID,
		arg.ExerciseTaskID,
	)
	return err
}

const deleteEventChallenges = `-- name: DeleteEventChallenges :exec
delete
from event_challenges
where exercise_id = $1
  and event_id = $2
`

type DeleteEventChallengesParams struct {
	ExerciseID uuid.UUID `json:"exercise_id"`
	EventID    uuid.UUID `json:"event_id"`
}

func (q *Queries) DeleteEventChallenges(ctx context.Context, arg DeleteEventChallengesParams) error {
	_, err := q.exec(ctx, q.deleteEventChallengesStmt, deleteEventChallenges, arg.ExerciseID, arg.EventID)
	return err
}

const getEventChallengeByID = `-- name: GetEventChallengeByID :one
select id, event_id, category_id, name, description, points, order_index, exercise_id, exercise_task_id, updated_at, updated_by, created_at
from event_challenges
where id = $1
  and event_id = $2
`

type GetEventChallengeByIDParams struct {
	ID      uuid.UUID `json:"id"`
	EventID uuid.UUID `json:"event_id"`
}

func (q *Queries) GetEventChallengeByID(ctx context.Context, arg GetEventChallengeByIDParams) (EventChallenge, error) {
	row := q.queryRow(ctx, q.getEventChallengeByIDStmt, getEventChallengeByID, arg.ID, arg.EventID)
	var i EventChallenge
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Points,
		&i.OrderIndex,
		&i.ExerciseID,
		&i.ExerciseTaskID,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getEventChallenges = `-- name: GetEventChallenges :many
select id, event_id, category_id, name, description, points, order_index, exercise_id, exercise_task_id, updated_at, updated_by, created_at
from event_challenges
where event_id = $1
order by order_index
`

func (q *Queries) GetEventChallenges(ctx context.Context, eventID uuid.UUID) ([]EventChallenge, error) {
	rows, err := q.query(ctx, q.getEventChallengesStmt, getEventChallenges, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventChallenge{}
	for rows.Next() {
		var i EventChallenge
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Points,
			&i.OrderIndex,
			&i.ExerciseID,
			&i.ExerciseTaskID,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventChallengeOrder = `-- name: UpdateEventChallengeOrder :exec
update event_challenges
set category_id = $3,
    order_index = $4
where id = $1
  and event_id = $2
`

type UpdateEventChallengeOrderParams struct {
	ID         uuid.UUID `json:"id"`
	EventID    uuid.UUID `json:"event_id"`
	CategoryID uuid.UUID `json:"category_id"`
	OrderIndex int32     `json:"order_index"`
}

func (q *Queries) UpdateEventChallengeOrder(ctx context.Context, arg UpdateEventChallengeOrderParams) error {
	_, err := q.exec(ctx, q.updateEventChallengeOrderStmt, updateEventChallengeOrder,
		arg.ID,
		arg.EventID,
		arg.CategoryID,
		arg.OrderIndex,
	)
	return err
}
