// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: exercise_categories.sql

package postgres

import (
	"context"

	"github.com/gofrs/uuid"
)

const createExerciseCategory = `-- name: CreateExerciseCategory :exec
insert into exercise_categories
    (id, name, description)
values ($1, $2, $3)
`

type CreateExerciseCategoryParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) CreateExerciseCategory(ctx context.Context, arg CreateExerciseCategoryParams) error {
	_, err := q.db.Exec(ctx, createExerciseCategory, arg.ID, arg.Name, arg.Description)
	return err
}

const deleteExerciseCategory = `-- name: DeleteExerciseCategory :execrows
delete
from exercise_categories
where id = $1
`

func (q *Queries) DeleteExerciseCategory(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteExerciseCategory, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getExerciseCategories = `-- name: GetExerciseCategories :many
select id, name, description, updated_at, updated_by, created_at
from exercise_categories
`

func (q *Queries) GetExerciseCategories(ctx context.Context) ([]ExerciseCategory, error) {
	rows, err := q.db.Query(ctx, getExerciseCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExerciseCategory{}
	for rows.Next() {
		var i ExerciseCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExerciseCategory = `-- name: UpdateExerciseCategory :execrows
update exercise_categories
set name        = $2,
    description = $3,
    updated_at  = now(),
    updated_by  = $4
where id = $1
`

type UpdateExerciseCategoryParams struct {
	ID          uuid.UUID     `json:"id"`
	Name        string        `json:"name"`
	Description string        `json:"description"`
	UpdatedBy   uuid.NullUUID `json:"updated_by"`
}

func (q *Queries) UpdateExerciseCategory(ctx context.Context, arg UpdateExerciseCategoryParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateExerciseCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UpdatedBy,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
