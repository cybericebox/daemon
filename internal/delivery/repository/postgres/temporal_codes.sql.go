// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: temporal_codes.sql

package postgres

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
)

const createTemporalCode = `-- name: CreateTemporalCode :exec
insert into temporal_codes (id, expired_at, code_type, v0, v1, v2)
values ($1, $2, $3, $4, $5, $6)
`

type CreateTemporalCodeParams struct {
	ID        uuid.UUID `json:"id"`
	ExpiredAt time.Time `json:"expired_at"`
	CodeType  int32     `json:"code_type"`
	V0        string    `json:"v0"`
	V1        string    `json:"v1"`
	V2        string    `json:"v2"`
}

func (q *Queries) CreateTemporalCode(ctx context.Context, arg CreateTemporalCodeParams) error {
	_, err := q.exec(ctx, q.createTemporalCodeStmt, createTemporalCode,
		arg.ID,
		arg.ExpiredAt,
		arg.CodeType,
		arg.V0,
		arg.V1,
		arg.V2,
	)
	return err
}

const deleteTemporalCode = `-- name: DeleteTemporalCode :exec
delete
from temporal_codes
where id = $1
`

func (q *Queries) DeleteTemporalCode(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteTemporalCodeStmt, deleteTemporalCode, id)
	return err
}

const getTemporalCode = `-- name: GetTemporalCode :one
select id, expired_at, code_type, v0, v1, v2, created_at
from temporal_codes
where id = $1
`

func (q *Queries) GetTemporalCode(ctx context.Context, id uuid.UUID) (TemporalCode, error) {
	row := q.queryRow(ctx, q.getTemporalCodeStmt, getTemporalCode, id)
	var i TemporalCode
	err := row.Scan(
		&i.ID,
		&i.ExpiredAt,
		&i.CodeType,
		&i.V0,
		&i.V1,
		&i.V2,
		&i.CreatedAt,
	)
	return i, err
}
