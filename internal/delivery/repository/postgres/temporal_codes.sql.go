// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: temporal_codes.sql

package postgres

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
)

const createTemporalCode = `-- name: CreateTemporalCode :exec
insert into temporal_codes (id, expired_at, code_type, data)
values ($1, $2, $3, $4)
`

type CreateTemporalCodeParams struct {
	ID        uuid.UUID `json:"id"`
	ExpiredAt time.Time `json:"expired_at"`
	CodeType  int32     `json:"code_type"`
	Data      []byte    `json:"data"`
}

func (q *Queries) CreateTemporalCode(ctx context.Context, arg CreateTemporalCodeParams) error {
	_, err := q.db.Exec(ctx, createTemporalCode,
		arg.ID,
		arg.ExpiredAt,
		arg.CodeType,
		arg.Data,
	)
	return err
}

const deleteExpiredTemporalCodes = `-- name: DeleteExpiredTemporalCodes :execrows
delete
from temporal_codes
where expired_at < now()
`

func (q *Queries) DeleteExpiredTemporalCodes(ctx context.Context) (int64, error) {
	result, err := q.db.Exec(ctx, deleteExpiredTemporalCodes)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteTemporalCode = `-- name: DeleteTemporalCode :execrows
delete
from temporal_codes
where id = $1
`

func (q *Queries) DeleteTemporalCode(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteTemporalCode, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getTemporalCode = `-- name: GetTemporalCode :one
select id, expired_at, code_type, data, created_at
from temporal_codes
where id = $1
`

func (q *Queries) GetTemporalCode(ctx context.Context, id uuid.UUID) (TemporalCode, error) {
	row := q.db.QueryRow(ctx, getTemporalCode, id)
	var i TemporalCode
	err := row.Scan(
		&i.ID,
		&i.ExpiredAt,
		&i.CodeType,
		&i.Data,
		&i.CreatedAt,
	)
	return i, err
}
