// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package postgres

import (
	"time"

	"github.com/cybericebox/daemon/internal/model"
	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Event struct {
	ID                     uuid.UUID          `json:"id"`
	Type                   int32              `json:"type"`
	Availability           int32              `json:"availability"`
	Participation          int32              `json:"participation"`
	Tag                    string             `json:"tag"`
	Name                   string             `json:"name"`
	Description            string             `json:"description"`
	Rules                  string             `json:"rules"`
	Picture                string             `json:"picture"`
	DynamicScoring         bool               `json:"dynamic_scoring"`
	DynamicMax             int32              `json:"dynamic_max"`
	DynamicMin             int32              `json:"dynamic_min"`
	DynamicSolveThreshold  int32              `json:"dynamic_solve_threshold"`
	Registration           int32              `json:"registration"`
	ScoreboardAvailability int32              `json:"scoreboard_availability"`
	ParticipantsVisibility int32              `json:"participants_visibility"`
	PublishTime            time.Time          `json:"publish_time"`
	StartTime              time.Time          `json:"start_time"`
	FinishTime             time.Time          `json:"finish_time"`
	WithdrawTime           time.Time          `json:"withdraw_time"`
	UpdatedAt              pgtype.Timestamptz `json:"updated_at"`
	UpdatedBy              uuid.NullUUID      `json:"updated_by"`
	CreatedAt              time.Time          `json:"created_at"`
}

type EventChallenge struct {
	ID             uuid.UUID           `json:"id"`
	EventID        uuid.UUID           `json:"event_id"`
	CategoryID     uuid.UUID           `json:"category_id"`
	Data           model.ChallengeData `json:"data"`
	OrderIndex     int32               `json:"order_index"`
	ExerciseID     uuid.UUID           `json:"exercise_id"`
	ExerciseTaskID uuid.UUID           `json:"exercise_task_id"`
	UpdatedAt      pgtype.Timestamptz  `json:"updated_at"`
	UpdatedBy      uuid.NullUUID       `json:"updated_by"`
	CreatedAt      time.Time           `json:"created_at"`
}

type EventChallengeCategory struct {
	ID         uuid.UUID          `json:"id"`
	EventID    uuid.UUID          `json:"event_id"`
	Name       string             `json:"name"`
	OrderIndex int32              `json:"order_index"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	UpdatedBy  uuid.NullUUID      `json:"updated_by"`
	CreatedAt  time.Time          `json:"created_at"`
}

type EventParticipant struct {
	UserID         uuid.UUID          `json:"user_id"`
	EventID        uuid.UUID          `json:"event_id"`
	TeamID         uuid.NullUUID      `json:"team_id"`
	Name           string             `json:"name"`
	ApprovalStatus int32              `json:"approval_status"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	UpdatedBy      uuid.NullUUID      `json:"updated_by"`
	CreatedAt      time.Time          `json:"created_at"`
}

type Exercise struct {
	ID          uuid.UUID          `json:"id"`
	CategoryID  uuid.UUID          `json:"category_id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	Data        model.ExerciseData `json:"data"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	UpdatedBy   uuid.NullUUID      `json:"updated_by"`
	CreatedAt   time.Time          `json:"created_at"`
}

type ExerciseCategory struct {
	ID          uuid.UUID          `json:"id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	UpdatedBy   uuid.NullUUID      `json:"updated_by"`
	CreatedAt   time.Time          `json:"created_at"`
}

type File struct {
	ID          uuid.UUID `json:"id"`
	StorageType string    `json:"storage_type"`
	CreatedAt   time.Time `json:"created_at"`
}

type TemporalCode struct {
	ID        uuid.UUID `json:"id"`
	ExpiredAt time.Time `json:"expired_at"`
	CodeType  int32     `json:"code_type"`
	Data      []byte    `json:"data"`
	CreatedAt time.Time `json:"created_at"`
}

type User struct {
	ID             uuid.UUID          `json:"id"`
	GoogleID       pgtype.Text        `json:"google_id"`
	Email          string             `json:"email"`
	Name           string             `json:"name"`
	HashedPassword string             `json:"hashed_password"`
	Picture        string             `json:"picture"`
	Role           string             `json:"role"`
	LastSeen       time.Time          `json:"last_seen"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	UpdatedBy      uuid.NullUUID      `json:"updated_by"`
	CreatedAt      time.Time          `json:"created_at"`
}
