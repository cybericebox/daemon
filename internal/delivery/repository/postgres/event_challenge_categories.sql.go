// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: event_challenge_categories.sql

package postgres

import (
	"context"

	"github.com/gofrs/uuid"
)

const createEventChallengeCategory = `-- name: CreateEventChallengeCategory :exec
insert into event_challenge_categories
    (id, event_id, name, order_index)
values ($1, $2, $3, $4)
`

type CreateEventChallengeCategoryParams struct {
	ID         uuid.UUID `json:"id"`
	EventID    uuid.UUID `json:"event_id"`
	Name       string    `json:"name"`
	OrderIndex int32     `json:"order_index"`
}

func (q *Queries) CreateEventChallengeCategory(ctx context.Context, arg CreateEventChallengeCategoryParams) error {
	_, err := q.db.Exec(ctx, createEventChallengeCategory,
		arg.ID,
		arg.EventID,
		arg.Name,
		arg.OrderIndex,
	)
	return err
}

const deleteEventChallengeCategory = `-- name: DeleteEventChallengeCategory :execrows
delete
from event_challenge_categories
where id = $1
  and event_id = $2
`

type DeleteEventChallengeCategoryParams struct {
	ID      uuid.UUID `json:"id"`
	EventID uuid.UUID `json:"event_id"`
}

func (q *Queries) DeleteEventChallengeCategory(ctx context.Context, arg DeleteEventChallengeCategoryParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteEventChallengeCategory, arg.ID, arg.EventID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getEventChallengeCategories = `-- name: GetEventChallengeCategories :many
select id, event_id, name, order_index, updated_at, updated_by, created_at
from event_challenge_categories
where event_id = $1
order by order_index
`

func (q *Queries) GetEventChallengeCategories(ctx context.Context, eventID uuid.UUID) ([]EventChallengeCategory, error) {
	rows, err := q.db.Query(ctx, getEventChallengeCategories, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventChallengeCategory{}
	for rows.Next() {
		var i EventChallengeCategory
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Name,
			&i.OrderIndex,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventChallengeCategory = `-- name: UpdateEventChallengeCategory :execrows
update event_challenge_categories
set name = $3,
    updated_at = now(),
    updated_by = $4
where id = $1
  and event_id = $2
`

type UpdateEventChallengeCategoryParams struct {
	ID        uuid.UUID     `json:"id"`
	EventID   uuid.UUID     `json:"event_id"`
	Name      string        `json:"name"`
	UpdatedBy uuid.NullUUID `json:"updated_by"`
}

func (q *Queries) UpdateEventChallengeCategory(ctx context.Context, arg UpdateEventChallengeCategoryParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateEventChallengeCategory,
		arg.ID,
		arg.EventID,
		arg.Name,
		arg.UpdatedBy,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
