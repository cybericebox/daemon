// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: event_teams.sql

package postgres

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countTeamsInEvents = `-- name: CountTeamsInEvents :many
select count(*), event_id
from event_teams
group by event_id
`

type CountTeamsInEventsRow struct {
	Count   int64     `json:"count"`
	EventID uuid.UUID `json:"event_id"`
}

func (q *Queries) CountTeamsInEvents(ctx context.Context) ([]CountTeamsInEventsRow, error) {
	rows, err := q.db.Query(ctx, countTeamsInEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CountTeamsInEventsRow{}
	for rows.Next() {
		var i CountTeamsInEventsRow
		if err := rows.Scan(&i.Count, &i.EventID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createTeamInEvent = `-- name: CreateTeamInEvent :exec
insert into event_teams (id, name, join_code, event_id, laboratory_id)
values ($1, $2, $3, $4, $5)
`

type CreateTeamInEventParams struct {
	ID           uuid.UUID     `json:"id"`
	Name         string        `json:"name"`
	JoinCode     string        `json:"join_code"`
	EventID      uuid.UUID     `json:"event_id"`
	LaboratoryID uuid.NullUUID `json:"laboratory_id"`
}

func (q *Queries) CreateTeamInEvent(ctx context.Context, arg CreateTeamInEventParams) error {
	_, err := q.db.Exec(ctx, createTeamInEvent,
		arg.ID,
		arg.Name,
		arg.JoinCode,
		arg.EventID,
		arg.LaboratoryID,
	)
	return err
}

const deleteEventTeam = `-- name: DeleteEventTeam :execrows
delete
from event_teams
where id = $1
  and event_id = $2
`

type DeleteEventTeamParams struct {
	ID      uuid.UUID `json:"id"`
	EventID uuid.UUID `json:"event_id"`
}

func (q *Queries) DeleteEventTeam(ctx context.Context, arg DeleteEventTeamParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteEventTeam, arg.ID, arg.EventID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getEventParticipantTeam = `-- name: GetEventParticipantTeam :one
select event_teams.id, event_teams.name, event_teams.join_code, event_teams.laboratory_id
from event_teams
         join event_participants on event_teams.id = event_participants.team_id
where event_participants.event_id = $1
  and event_participants.user_id = $2
`

type GetEventParticipantTeamParams struct {
	EventID uuid.UUID `json:"event_id"`
	UserID  uuid.UUID `json:"user_id"`
}

type GetEventParticipantTeamRow struct {
	ID           uuid.UUID     `json:"id"`
	Name         string        `json:"name"`
	JoinCode     string        `json:"join_code"`
	LaboratoryID uuid.NullUUID `json:"laboratory_id"`
}

func (q *Queries) GetEventParticipantTeam(ctx context.Context, arg GetEventParticipantTeamParams) (GetEventParticipantTeamRow, error) {
	row := q.db.QueryRow(ctx, getEventParticipantTeam, arg.EventID, arg.UserID)
	var i GetEventParticipantTeamRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.JoinCode,
		&i.LaboratoryID,
	)
	return i, err
}

const getEventTeamByID = `-- name: GetEventTeamByID :one
select id, event_id, name, laboratory_id, updated_at, updated_by, created_at
from event_teams
where id = $1
  and event_id = $2
`

type GetEventTeamByIDParams struct {
	ID      uuid.UUID `json:"id"`
	EventID uuid.UUID `json:"event_id"`
}

type GetEventTeamByIDRow struct {
	ID           uuid.UUID          `json:"id"`
	EventID      uuid.UUID          `json:"event_id"`
	Name         string             `json:"name"`
	LaboratoryID uuid.NullUUID      `json:"laboratory_id"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	UpdatedBy    uuid.NullUUID      `json:"updated_by"`
	CreatedAt    time.Time          `json:"created_at"`
}

func (q *Queries) GetEventTeamByID(ctx context.Context, arg GetEventTeamByIDParams) (GetEventTeamByIDRow, error) {
	row := q.db.QueryRow(ctx, getEventTeamByID, arg.ID, arg.EventID)
	var i GetEventTeamByIDRow
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.LaboratoryID,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getEventTeamByName = `-- name: GetEventTeamByName :one
select id, name, join_code
from event_teams
where name = $1
  and event_id = $2
`

type GetEventTeamByNameParams struct {
	Name    string    `json:"name"`
	EventID uuid.UUID `json:"event_id"`
}

type GetEventTeamByNameRow struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	JoinCode string    `json:"join_code"`
}

func (q *Queries) GetEventTeamByName(ctx context.Context, arg GetEventTeamByNameParams) (GetEventTeamByNameRow, error) {
	row := q.db.QueryRow(ctx, getEventTeamByName, arg.Name, arg.EventID)
	var i GetEventTeamByNameRow
	err := row.Scan(&i.ID, &i.Name, &i.JoinCode)
	return i, err
}

const getEventTeams = `-- name: GetEventTeams :many
select id, event_id, name, laboratory_id, updated_at, updated_by, created_at
from event_teams
where event_id = $1
`

type GetEventTeamsRow struct {
	ID           uuid.UUID          `json:"id"`
	EventID      uuid.UUID          `json:"event_id"`
	Name         string             `json:"name"`
	LaboratoryID uuid.NullUUID      `json:"laboratory_id"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	UpdatedBy    uuid.NullUUID      `json:"updated_by"`
	CreatedAt    time.Time          `json:"created_at"`
}

func (q *Queries) GetEventTeams(ctx context.Context, eventID uuid.UUID) ([]GetEventTeamsRow, error) {
	rows, err := q.db.Query(ctx, getEventTeams, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEventTeamsRow{}
	for rows.Next() {
		var i GetEventTeamsRow
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Name,
			&i.LaboratoryID,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventTeamName = `-- name: UpdateEventTeamName :execrows
update event_teams
set name = $3,
    updated_at = now(),
    updated_by = $4
where id = $1
  and event_id = $2
`

type UpdateEventTeamNameParams struct {
	ID        uuid.UUID     `json:"id"`
	EventID   uuid.UUID     `json:"event_id"`
	Name      string        `json:"name"`
	UpdatedBy uuid.NullUUID `json:"updated_by"`
}

func (q *Queries) UpdateEventTeamName(ctx context.Context, arg UpdateEventTeamNameParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateEventTeamName,
		arg.ID,
		arg.EventID,
		arg.Name,
		arg.UpdatedBy,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
