// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package postgres

import (
	"context"

	"github.com/gofrs/uuid"
)

type Querier interface {
	CountChallengesInEvents(ctx context.Context) ([]CountChallengesInEventsRow, error)
	CountTeamsInEvents(ctx context.Context) ([]CountTeamsInEventsRow, error)
	CreateEvent(ctx context.Context, arg CreateEventParams) error
	CreateEventChallenge(ctx context.Context, arg CreateEventChallengeParams) error
	CreateEventChallengeCategory(ctx context.Context, arg CreateEventChallengeCategoryParams) error
	CreateEventChallengeSolutionAttempt(ctx context.Context, arg CreateEventChallengeSolutionAttemptParams) error
	CreateEventParticipant(ctx context.Context, arg CreateEventParticipantParams) error
	CreateEventTeamChallenge(ctx context.Context, arg CreateEventTeamChallengeParams) error
	CreateExercise(ctx context.Context, arg CreateExerciseParams) error
	CreateExerciseCategory(ctx context.Context, arg CreateExerciseCategoryParams) error
	CreateFile(ctx context.Context, arg CreateFileParams) error
	CreateTeamInEvent(ctx context.Context, arg CreateTeamInEventParams) error
	CreateTemporalCode(ctx context.Context, arg CreateTemporalCodeParams) error
	CreateUser(ctx context.Context, arg CreateUserParams) error
	DeleteEvent(ctx context.Context, id uuid.UUID) error
	DeleteEventChallenge(ctx context.Context, arg DeleteEventChallengeParams) error
	DeleteEventChallengeCategory(ctx context.Context, arg DeleteEventChallengeCategoryParams) error
	DeleteExercise(ctx context.Context, id uuid.UUID) error
	DeleteExerciseCategory(ctx context.Context, id uuid.UUID) error
	DeleteFile(ctx context.Context, id uuid.UUID) error
	DeleteTemporalCode(ctx context.Context, id uuid.UUID) error
	DeleteUser(ctx context.Context, id uuid.UUID) error
	DoesUserExistByID(ctx context.Context, id uuid.UUID) (bool, error)
	// -- name: GetAllSolvedChallengesIDsByTeamInEvent :many
	// select challenge_id
	// from event_challenge_solution_attempts
	// where event_id = $1
	//   and team_id = $2
	//   and is_correct = true;
	GetAllChallengesSolutionsInEvent(ctx context.Context, eventID uuid.UUID) ([]GetAllChallengesSolutionsInEventRow, error)
	GetAllEvents(ctx context.Context) ([]Event, error)
	GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error)
	GetChallengeFlag(ctx context.Context, arg GetChallengeFlagParams) (string, error)
	GetEmailTemplateBody(ctx context.Context, key string) (string, error)
	GetEmailTemplateSubject(ctx context.Context, key string) (string, error)
	GetEventByID(ctx context.Context, id uuid.UUID) (Event, error)
	GetEventByTag(ctx context.Context, tag string) (Event, error)
	GetEventChallengeCategories(ctx context.Context, eventID uuid.UUID) ([]EventChallengeCategory, error)
	GetEventChallenges(ctx context.Context, eventID uuid.UUID) ([]EventChallenge, error)
	GetEventIDIfNotWithdrawn(ctx context.Context, tag string) (uuid.UUID, error)
	GetEventIDIfRunning(ctx context.Context, tag string) (uuid.UUID, error)
	GetEventJoinStatus(ctx context.Context, arg GetEventJoinStatusParams) (int32, error)
	GetEventParticipantTeam(ctx context.Context, arg GetEventParticipantTeamParams) (GetEventParticipantTeamRow, error)
	GetEventParticipantTeamID(ctx context.Context, arg GetEventParticipantTeamIDParams) (uuid.NullUUID, error)
	GetEventTeamByName(ctx context.Context, arg GetEventTeamByNameParams) (GetEventTeamByNameRow, error)
	GetEventTeams(ctx context.Context, eventID uuid.UUID) ([]GetEventTeamsRow, error)
	GetExerciseByID(ctx context.Context, id uuid.UUID) (Exercise, error)
	GetExerciseCategories(ctx context.Context) ([]ExerciseCategory, error)
	GetExercises(ctx context.Context) ([]Exercise, error)
	GetExercisesByCategory(ctx context.Context, categoryID uuid.UUID) ([]Exercise, error)
	GetFileByID(ctx context.Context, id uuid.UUID) (File, error)
	GetTeamsSolvedChallengeInEvent(ctx context.Context, arg GetTeamsSolvedChallengeInEventParams) ([]GetTeamsSolvedChallengeInEventRow, error)
	GetTemporalCode(ctx context.Context, id uuid.UUID) (TemporalCode, error)
	GetUserByEmail(ctx context.Context, email string) (User, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (User, error)
	GetUsersWithSimilar(ctx context.Context, search string) ([]GetUsersWithSimilarRow, error)
	SetLastSeen(ctx context.Context, id uuid.UUID) error
	TeamExistsInEvent(ctx context.Context, arg TeamExistsInEventParams) (bool, error)
	UpdateEvent(ctx context.Context, arg UpdateEventParams) error
	UpdateEventChallengeCategory(ctx context.Context, arg UpdateEventChallengeCategoryParams) error
	UpdateEventChallengeCategoryOrder(ctx context.Context, arg UpdateEventChallengeCategoryOrderParams) error
	UpdateEventChallengeOrder(ctx context.Context, arg UpdateEventChallengeOrderParams) error
	UpdateEventParticipantStatus(ctx context.Context, arg UpdateEventParticipantStatusParams) error
	UpdateEventParticipantTeam(ctx context.Context, arg UpdateEventParticipantTeamParams) error
	UpdateExercise(ctx context.Context, arg UpdateExerciseParams) error
	UpdateExerciseCategory(ctx context.Context, arg UpdateExerciseCategoryParams) error
	UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error
	UpdateUserGoogleID(ctx context.Context, arg UpdateUserGoogleIDParams) error
	UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error
	UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error
	UpdateUserPicture(ctx context.Context, arg UpdateUserPictureParams) error
	UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error
}

var _ Querier = (*Queries)(nil)
