// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: event_participants.sql

package postgres

import (
	"context"

	"github.com/gofrs/uuid"
)

const createEventParticipant = `-- name: CreateEventParticipant :exec
insert into event_participants (event_id, user_id, approval_status)
values ($1, $2, $3)
`

type CreateEventParticipantParams struct {
	EventID        uuid.UUID `json:"event_id"`
	UserID         uuid.UUID `json:"user_id"`
	ApprovalStatus int32     `json:"approval_status"`
}

func (q *Queries) CreateEventParticipant(ctx context.Context, arg CreateEventParticipantParams) error {
	_, err := q.exec(ctx, q.createEventParticipantStmt, createEventParticipant, arg.EventID, arg.UserID, arg.ApprovalStatus)
	return err
}

const getEventJoinStatus = `-- name: GetEventJoinStatus :one
select approval_status
from event_participants
where event_id = $1
  and user_id = $2
`

type GetEventJoinStatusParams struct {
	EventID uuid.UUID `json:"event_id"`
	UserID  uuid.UUID `json:"user_id"`
}

func (q *Queries) GetEventJoinStatus(ctx context.Context, arg GetEventJoinStatusParams) (int32, error) {
	row := q.queryRow(ctx, q.getEventJoinStatusStmt, getEventJoinStatus, arg.EventID, arg.UserID)
	var approval_status int32
	err := row.Scan(&approval_status)
	return approval_status, err
}

const updateEventParticipantStatus = `-- name: UpdateEventParticipantStatus :exec
update event_participants
set approval_status = $3
where event_id = $1
  and user_id = $2
`

type UpdateEventParticipantStatusParams struct {
	EventID        uuid.UUID `json:"event_id"`
	UserID         uuid.UUID `json:"user_id"`
	ApprovalStatus int32     `json:"approval_status"`
}

func (q *Queries) UpdateEventParticipantStatus(ctx context.Context, arg UpdateEventParticipantStatusParams) error {
	_, err := q.exec(ctx, q.updateEventParticipantStatusStmt, updateEventParticipantStatus, arg.EventID, arg.UserID, arg.ApprovalStatus)
	return err
}

const updateEventParticipantTeam = `-- name: UpdateEventParticipantTeam :exec
update event_participants
set team_id = $3
where event_id = $1
  and user_id = $2
`

type UpdateEventParticipantTeamParams struct {
	EventID uuid.UUID     `json:"event_id"`
	UserID  uuid.UUID     `json:"user_id"`
	TeamID  uuid.NullUUID `json:"team_id"`
}

func (q *Queries) UpdateEventParticipantTeam(ctx context.Context, arg UpdateEventParticipantTeamParams) error {
	_, err := q.exec(ctx, q.updateEventParticipantTeamStmt, updateEventParticipantTeam, arg.EventID, arg.UserID, arg.TeamID)
	return err
}
